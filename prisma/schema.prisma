// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User{
  id Int @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  name String 
  email String @unique
  pass String @unique
  userId String @unique @default(uuid())
  role Roles @default(REGULAR)
  isOnboarded Boolean @default(false)
  organizations Organizations[]
  nominations Nominations[]
}

model Organizations{
  id Int @id @unique @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  organizationName String
  phone String
  otherPhone String
  address String
  profileImage String
  uniqueOrganizationId String @unique @default(cuid())
  organizationId Int 
  user User @relation(fields: [organizationId], references: [id])
}


//The nominations model. Note that the admin will have to clear the system after each nomination
model Nominations{
  id Int @id @unique @default(autoincrement())
  nominationCategories String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
  nominationId Int @unique @default(autoincrement())
  nominationStartDate DateTime
  nominationEndDate DateTime
  nominationPeriod DateTime
  nominationDescription String
  uniqueNominationId String @unique
  nominationTitle String
  nominees Nominees[]
  nominationRate Int
  user User @relation(fields: [nominationId], references: [id])
}

model Nominees{
  id Int @id @unique @default(autoincrement())
  createdAt DateTime @default(now()) 
  updatedAt DateTime @default(now())
  uniqueNomineeId String @unique() @default(cuid())
  nomineePhone String
  nomineeCategory String
  nomineeFirstName String
  nomineeLastName String
  nomineeEmail String
  nomineeProfileImage String
  nomineeBio String
  nomineeCode String
  nomineeStatus String @default("pending")
  nomineeVotes Int @default(0)
  nomineeAmount Int @default(0)
  nomineeId Int @default(autoincrement())
  nominations Nominations @relation(fields: [nomineeId], references: [id])

}


enum Roles{
  ADMIN
  SUPERADMIN
  GUEST
  REGULAR
}